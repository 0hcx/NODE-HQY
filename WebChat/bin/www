#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ChatRoom:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
  
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = require('socket.io').listen(server);
var userId = {};
var toChat = {};
io.on('connection', function(socket){
  socket.on('add user', function (data) {
    console.log(socket.id);
    socket.name = data.from;
    toChat[data.from] = data.to;//保存用户聊天对象
    userId[data.from] = socket;//每次进入都要socket.id都要变一次
  });
  socket.on('chat message', function(msg){
    // console.log(msg);
    if(toChat[toChat[socket.name]] == socket.name && userId[msg.to]) {
      var data = {
        msg: msg.content,
        ctn: msg.content,
        from: msg.from,
        to: msg.to,
        status: 1
      };
      userId[msg.to].emit('chat message', data);
    } else if(userId[msg.to] && toChat[toChat[socket.name]] != socket.name) {
      var data = {
        msg: "系统：你收到其他用户的聊天信息！",
        _msg: "对方正在和其他人聊天！",
        ctn: msg.content,
        from: msg.from,
        to: msg.to,
        status: 2
      };
      // userId[msg.from].emit('chat busy', data);
      userId[msg.to].emit('chat message', data);
    } else {
      var data = {
        msg: "抱歉，当前用户不在线！",
        ctn: msg.content,
        from: msg.from,
        to: msg.to,
        status: 0
      };
      userId[msg.from].emit('chat message', data);
    }
  });
  socket.on('disconnect', function () {
    //用户退出提醒对方
    if(userId[toChat[socket.name]] && toChat[toChat[socket.name]] == socket.name) {//判断对方聊天的对象是否是自己
      userId[toChat[socket.name]].emit('user left', "对方退出！");
    }
    delete userId[socket.name];
    delete toChat[socket.name];
  });
});